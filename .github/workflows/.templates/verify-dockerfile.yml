#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
---
#@ workflow_name = "Docker Build"
name:  #@ workflow_name

"on":
  pull_request:
    paths:
      - ".dockerignore"
      - ".dockleignore"
      - ".github/workflows/*dockerfile*.yml"
      - "**/Dockerfile*"
  #! For caching docker layers in default branch.
  push:
    branches:
      - "main"

jobs:
  hadolint:
    name: docker / hadolint
    steps:
      #! recrusively lint files named '*Dockerfile*' pattern
      #!https://github.com/reviewdog/action-hadolint/blob/985a0c74c649805d539d5fecc971e512f7f55410/script.sh#L34
      - name: hadolint
        uses: reviewdog/action-hadolint@v1.26
        with:
          fail_on_error: true
          hadolint_flags: --failure-threshold warning

  build:
    name: docker / build
    services:
      #! docker private registry
      #@ registry_image = "registry:5000/" + data.values.env.image
      #@ registry_push = "localhost:5000/" + data.values.env.image
      registry:
        image: registry:2
        ports:
          - 5000:5000
    #@yaml/text-templated-strings
    steps:
      -  #@ template.replace(data.values.steps.setup_buildx)
      -  #@ template.replace(data.values.steps.run_buildx)
      -  #@ template.replace(data.values.steps.move_cache)
      #! Upload image
      #@ built_image_name = "my_built_image"
      #@ built_image_path = "/tmp/" + built_image_name + ".tar"
      - name: Check images
        continue-on-error: true
        run: |
          echo "--- Registry ---"
          curl -Ss -X GET http://localhost:5000/v2/_catalog
          echo "--- Local ---"
          docker image ls
      - name: Save docker image
        run: |
          docker pull (@= registry_push @)
          docker image ls
          docker save --output (@= built_image_path @) (@= registry_push @)
      - name: Upload built image
        uses: actions/upload-artifact@v2
        with:
          name: (@= built_image_name @)
          path: (@= built_image_path @)
          retention-days: 7

  scan_image:
    name: docker / vulnerability scan
    needs: build
    #@yaml/text-templated-strings
    steps:
      #! Load image
      -  #@ template.replace(data.values.steps.setup_buildx)
      - &download_image
        name: Download built image
        uses: actions/download-artifact@v2
        with:
          name: (@= built_image_name @)
          path: /tmp
      - &loading_image
        name: Load image
        id: load
        run: |
          docker load --input (@= built_image_path @)
          docker image ls
      #! Security Check
      - name: Enable problem matcher
        run: echo "::add-matcher::.github/workflows/dockle-problem-matcher.json"
      - name: Run Dockle
        id: dockle
        uses: docker://goodwithtech/dockle:latest
        with:
          #! wrong 'localhost', it is container localhost.
          args: >-
            --exit-code 1
            (@= registry_push @):latest
        env:
          #! use HTTP option:
          #! https://github.com/goodwithtech/dockle/blob/master/cmd/dockle/main.go#L40
          DOCKLE_INSECURE: true
          DOCKLE_NON_SSL: true
      - name: Run Trivy
        id: trivy
        if: ${{ always() && steps.load.outcome == 'success' }}
        uses: aquasecurity/trivy-action@0.1.0
        with:
          image-ref: (@= registry_push @):latest
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
        env:
          TRIVY_NON_SSL: true

  test:
    name: docker / compile test
    needs: build
    #@yaml/text-templated-strings
    steps:
      -  #@ template.replace(data.values.steps.setup_buildx)
      - *download_image
      - *loading_image
      - name: Compile test
        run: |
          docker run --rm \
            --mount=type=bind,src="$(pwd)",dst=/project \
            (@= registry_push @)
      - name: Validate static binary
        #@ build_bin = "$PWD/target/release/volta"
        run: |
          file (@= build_bin @)
          ldd (@= build_bin @)

          if [ "$(objdump -p (@= build_bin @) | grep -c 'NEEDED')" -eq 0 ]; then
              echo "Static!"
          else
              echo "Dynamic!!!"
              exit 1
          fi
      - name: Check built exectable
        run: |
          (@= build_bin @) --version && \
          (@= build_bin @) setup --verbose

#@ pattern = {"name": workflow_name}
#@overlay/match by=overlay.subset(pattern)
---
#@yaml/text-templated-strings
jobs:
  build:
    steps:
      #@overlay/match by=overlay.subset({"id": "buildx"})
      -
        #@overlay/match missing_ok=True
        with:
          #! without network=host, failed to connection refused
          driver-opts: network=host
      #@overlay/match by=overlay.subset({"id":"docker_build"})
      - with:
          #@overlay/replace
          push: true
        env:
          BUILD_IMAGE: (@= registry_push @)
  scan_image:
    steps:
      #@overlay/match by=overlay.subset({"id": "buildx"})
      -
        #@overlay/match missing_ok=True
        with:
          #! without network=host, failed to connection refused
          driver-opts: network=host
      #@overlay/match by=overlay.subset({"name": "Cache Docker layers"})
      #@overlay/remove
      - unused cache
  test:
    steps:
      #@overlay/match by=overlay.subset({"id": "checkout"})
      -
        #@overlay/match missing_ok=True
        with:
          repository: volta-cli/volta
          ref: v1.0.5
      #@overlay/match by=overlay.subset({"name": "Cache Docker layers"})
      #@overlay/remove
      - unused cache
